exit
values.sort_by {|a| a[1] }.reverse
values.sort_by {|a| a[1] }
values.sort_by {|a| a[1] }.reverse
values.sort_by {|a| a[1] }
values
exit
type
stats
continue
stats
continue
stats
continue
history
data.length
data
params
history
continue
params
type
stats
continue
exit
continue
exitcontinue
exit
stat
exit
out['response']['globalstats']['melee_kills_meter']['history'].length
out['response']['globalstats']['melee_kills_meter']['history']
out['response']['globalstats']['melee_kills_meter']
out['response']['globalstats']['melee_kills_ruler']
out['response']['globalstats']
out
continue
out
continue
out
exit
data
base_url
continue
startdate && enddate
base_url
continue
params[:user]
params
continue
@data
exit
params[:id]
params
continue
stats
exit
stats.map {|a| a['name'] }
WeaponStat.get_top_10('weapon_color_used_color_tan_khaki')
MiscStat.get_top_10('weapon_color_used_color_tan_khaki')
MiscStat.get_top_10(weapon_color_used_color_tan_khaki)
MiscStat.first.weapon_color_used_color_tan_khaki
MiscStat.first
stats.map {|a| a['name'] }
WeaponStat.first
stats.map {|a| a['name'] }
stats
exit
stats
ws_col
stats
exit
reload!
a
continue
data.last
continue
data.concat(no_history).last
data
continue
no_history
data.last
continue
data.last
item
continue
data.last
item
continue
data.last
continue
data[96]
data[95]
data.[95]
data.last
data.length
data
data.last
no_history
exit
"https://api.steampowered.com/ISteamUserStats/GetUserStatsForGame/v2/?key=#{ENV['STEAM_KEY']}&steamid=#{player}&appid=218620"
"https://api.steampowered.com/ISteamUserStats/GetUserStatsForGame/v2/?key=#{ENV['STEAM_KEY']}&steamid=player&appid=218620"
retreive_user_data(player)
data
exit
exit\
data
User.find_by(steam_id: 76561198158943796).name
User.find_by(steam_id: 76561198158943796)
MiscStat.where.not({name => nil}).order("#{name} DESC").limit(10).map {|a| a.user.steam_id }
MiscStat.where.not({name => nil}).order("#{name} DESC").limit(10)
users.map {|player| player.user.steam_id }
users
exit
steam_ids
test
exit
names
exit
continue
index
a
exit
index
exit
index
names[index]
a
exit
player['personaname']
player
exit
data['response']['players']
data['response']['players'].map {|player| out[steam_ids.index(player['76561198356868482'])] = player['personaname'] }
data
continue
User.names(users.map {|player| player.user.steam_id })
names
exit
User.names(ids)
ids
ids = users.map {|player| player.user.steam_id }
users.map {|player| player.user.steam_id }
User.names(users.map {|player| player.user.steam_id })
users.map {|player| player.user.steam_id }
users
exit
hash = Array.new(10)
hash = Array.new(10\)
hash.keys
hash.keys = ['1', '2', '3']
hash = {}
steam_ids
"http://api.steampowered.com/ISteamUser/GetPlayerSummaries/v0002/?key=#{ENV['STEAM_KEY']}&steamids=#{steam_ids.join(',')}"
data
exit
names
exit
users.map {|player| player.user.id }
users
names
continue
exit
data['response']['players'].first['personaname']
data['response']['players'].first['personname']
data['response']['players'].first
data['response']['players'].length
data['response']['players']
data['response']
data
response.ok?
response
exit
"https://partner.steam-api.com/ISteamUser/GetPlayerSummaries/v2/?key=#{ENV['STEAM_KEY']}&steamids=#{steam_id}"
exit
MiscStat.last
exit
weapon_stats.keys.length
weapon_stats
exit
  stats.map {|stat| stat[0..stat.index('_')] }.reduce({}) {|total, current| total.update(current => total[current] ? total[current] + 1 : 1)}.to_a.sort_by {|i| i[1] }
  stats.map {|stat| stat[0..stat.index('_')] }.reduce({}) {|total, current| total.update(current => total[current] ? total[current] + 1 : 1)}.to_a.sort_by {|i| i[1] }.reduce(0) {|sum, a| sum + a[1] }
  stats.map {|stat| stat[0..stat.index('_')] }.reduce({}) {|total, current| total.update(current => total[current] ? total[current] + 1 : 1)}.to_a.sort_by {|i| i[1] }.reduce(0) {|a| a[1] }
  stats.map {|stat| stat[0..stat.index('_')] }.reduce({}) {|total, current| total.update(current => total[current] ? total[current] + 1 : 1)}.to_a.sort_by {|i| i[1] }
  stats.map {|stat| stat[0..stat.index('_')] }.reduce({}) {|total, current| total.update(current => total[current] ? total[current] + 1 : 1)}.to_a
  stats.map {|stat| stat[0..stat.index('_')] }.reduce({}) {|total, current| total.update(current => total[current] ? total[current] + 1 : 1)}
stats.map {|stat| stat[0..stat.index('_')] }
stats.map {|stat| stat[0..stat.index('_')] }.reduce({}) {|stat, out| out['stat'] ? out['stat'] = out['stat'] + 1 : out['stat'] = 1 }
stats.map {|stat| stat[0..stat.index('_')] }
stats = data['game']['availableGameStats']['stats'].map {|s| s['name'] }
stats.map {|stat| stat[0..stat.index('_')] }
stats = data['game']['availableGameStats']['stats']
data['game']['availableGameStats']['stats'].filter {|s| s['name'].index('melee_') == 0 }.length
data['game']['availableGameStats']['stats'].filter {|s| s['name'].index('weapon_') == 0 }.length
data['game']['availableGameStats']['stats'].filter {|s| s['name'].index('weapon_') == 0 }
data['game']['availableGameStats']['stats'].length.filter {|s| s['name'].index('weapon_') == 0 }
data['game']['availableGameStats']['stats'].length
data['game']['availableGameStats']['stats']
data['game']['availableGameStats'].keys
data['game']['availableGameStats']
data['game'].keys
data['game']
data.keys
data.leys
data
continue
players['players'].length
players.keys
players
exit
fields.map {|f| f['name'] }.filter {|f| f.include?('level_') }.count
fields.map {|f| f['name'] }.filter {|f| f.include?('melee_') }.count
fields.map {|f| f['name'] }.filter {|f| f.include?('weapon') }.count
fields.map {|f| f['name'] }.filter {|f| f.include?('contract_') }.count
fields.map {|f| f['name'] }.filter {|f| f.include?('player_') }.count
fields.map {|f| f['name'] }.filter {|f| f.include?('player_') }
fields.map {|f| f['name'] }
fields
out
exit
data['playerstats']['stats'].map {|a| a['name'] }.filter {|a| a.include?('weapon') }.count
data['playerstats']['stats'].map {|a| a['name'] }.filter {|a| a.include?('player') }.count
data['playerstats']['stats'].map {|a| a['name'] }.filter {|a| a.include?('player_coins') }.count
data['playerstats']['stats'].map {|a| a['name'] }.filter {|a| a.include?('player_cash') }.count
data['playerstats']['stats'].filter {|a| a['name'].include?('player_rank') }
data['playerstats']['stats'].filter {|a| a.include?('player_rank') }
data['playerstats']['stats'].map {|a| a['name'] }.filter {|a| a.include?('player_rank') }.count
data['playerstats']['stats'].map {|a| a['name'] }.filter {|a| a.include?('player_rank') }
data['playerstats']['stats'].map {|a| a['name'] }.count
data['playerstats']['stats'].map {|a| a['name'] }
data['playerstats']['stats']
data['playerstats']
data.keys
data
data['playerStats']
data
continue
item['response']
continue
item['response']
exit
item['response']
continue
names
continue
exit
uuid
continue
name = ""
uuid
continue
name = ""
continue
names
continue
item['response']
